var _user$project$Types$spaces = A2(
	_elm_tools$parser$Parser$ignore,
	_elm_tools$parser$Parser$zeroOrMore,
	function (c) {
		return _elm_lang$core$Native_Utils.eq(
			c,
			_elm_lang$core$Native_Utils.chr(' '));
	});
var _user$project$Types$postcodeSecond = A2(
	_elm_tools$parser$Parser$inContext,
	'second part',
	_elm_tools$parser$Parser$source(
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser$ignore,
				_elm_tools$parser$Parser$Exactly(1),
				_elm_lang$core$Char$isDigit),
			A2(
				_elm_tools$parser$Parser$ignore,
				_elm_tools$parser$Parser$Exactly(2),
				_elm_lang$core$Char$isUpper))));
var _user$project$Types$postcodeFirst = A2(
	_elm_tools$parser$Parser$inContext,
	'first part',
	_elm_tools$parser$Parser$source(
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser$ignore,
									_elm_tools$parser$Parser$Exactly(1),
									_elm_lang$core$Char$isUpper),
								_elm_tools$parser$Parser$oneOf(
									{
										ctor: '::',
										_0: A2(
											_elm_tools$parser$Parser$ignore,
											_elm_tools$parser$Parser$Exactly(1),
											_elm_lang$core$Char$isUpper),
										_1: {
											ctor: '::',
											_0: _elm_tools$parser$Parser$succeed(
												{ctor: '_Tuple0'}),
											_1: {ctor: '[]'}
										}
									})),
							A2(
								_elm_tools$parser$Parser$ignore,
								_elm_tools$parser$Parser$Exactly(1),
								_elm_lang$core$Char$isDigit)),
						_elm_tools$parser$Parser$oneOf(
							{
								ctor: '::',
								_0: A2(
									_elm_tools$parser$Parser$ignore,
									_elm_tools$parser$Parser$Exactly(1),
									_elm_lang$core$Char$isDigit),
								_1: {
									ctor: '::',
									_0: _elm_tools$parser$Parser$succeed(
										{ctor: '_Tuple0'}),
									_1: {ctor: '[]'}
								}
							})),
					_elm_tools$parser$Parser$oneOf(
						{
							ctor: '::',
							_0: A2(
								_elm_tools$parser$Parser$ignore,
								_elm_tools$parser$Parser$Exactly(1),
								_elm_lang$core$Char$isUpper),
							_1: {
								ctor: '::',
								_0: _elm_tools$parser$Parser$succeed(
									{ctor: '_Tuple0'}),
								_1: {ctor: '[]'}
							}
						})),
				_user$project$Types$spaces),
			_elm_tools$parser$Parser$end)));
var _user$project$Types$parsePostcode = function (postcode) {
	var pcSecond = _elm_lang$core$String$toUpper(
		A2(
			_elm_lang$core$String$right,
			3,
			_elm_lang$core$String$trim(postcode)));
	var parsedSecond = A2(_elm_tools$parser$Parser$run, _user$project$Types$postcodeSecond, pcSecond);
	var pcFirst = _elm_lang$core$String$toUpper(
		_elm_lang$core$String$trim(
			A2(
				_elm_lang$core$String$dropRight,
				3,
				_elm_lang$core$String$trim(postcode))));
	var parsedFirst = A2(_elm_tools$parser$Parser$run, _user$project$Types$postcodeFirst, pcFirst);
	return A3(
		_elm_lang$core$Result$map2,
		F2(
			function (b, a) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					a,
					A2(_elm_lang$core$Basics_ops['++'], ' ', b));
			}),
		parsedSecond,
		parsedFirst);
};
var _user$project$Types$Model = F6(
	function (a, b, c, d, e, f) {
		return {route: a, history: b, locationInfo: c, nearestInfo: d, postcode: e, validPostcode: f};
	});
var _user$project$Types$LocationInfo = F2(
	function (a, b) {
		return {status: a, result: b};
	});
var _user$project$Types$LocationInfoResult = F3(
	function (a, b, c) {
		return {postcode: a, country: b, region: c};
	});
var _user$project$Types$decodeLocationInfoResult = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'region',
	_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'country',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'postcode',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Types$LocationInfoResult))));
var _user$project$Types$decodeLocationInfo = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'result',
	_user$project$Types$decodeLocationInfoResult,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_elm_lang$core$Json_Decode$int,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Types$LocationInfo)));
var _user$project$Types$NearestInfo = F2(
	function (a, b) {
		return {status: a, result: b};
	});
var _user$project$Types$NearestInfoResult = function (a) {
	return {postcode: a};
};
var _user$project$Types$decodeNearestInfoResult = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'postcode',
	_elm_lang$core$Json_Decode$string,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Types$NearestInfoResult));
var _user$project$Types$decodeNearestInfo = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'result',
	_elm_lang$core$Json_Decode$list(_user$project$Types$decodeNearestInfoResult),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_elm_lang$core$Json_Decode$int,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Types$NearestInfo)));
var _user$project$Types$NotFoundRoute = {ctor: 'NotFoundRoute'};
var _user$project$Types$InvalidRoute = function (a) {
	return {ctor: 'InvalidRoute', _0: a};
};
var _user$project$Types$PostcodeRoute = function (a) {
	return {ctor: 'PostcodeRoute', _0: a};
};
var _user$project$Types$HomeRoute = {ctor: 'HomeRoute'};
