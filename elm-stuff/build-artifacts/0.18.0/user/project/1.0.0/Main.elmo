var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$onLinkClick = function (message) {
	var options = {stopPropagation: false, preventDefault: true};
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'click',
		options,
		_elm_lang$core$Json_Decode$succeed(message));
};
var _user$project$Main$viewServerError = function (err) {
	var _p0 = err;
	if (_p0.ctor === 'BadStatus') {
		var _p1 = _p0._0;
		return _elm_lang$core$Native_Utils.eq(_p1.status.code, 404) ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Although valid, that postcode does not seem to exist.'),
				_1: {ctor: '[]'}
			}) : A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(_elm_lang$core$Basics_ops['++'], 'There was a problem. The server said: ', _p1.status.message)),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('There was a problem contacting the server.'),
				_1: {ctor: '[]'}
			});
	}
};
var _user$project$Main$viewInfo = function (_p2) {
	var _p3 = _p2;
	var _p4 = _p3._0;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(_p4.result.country),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_elm_lang$core$Maybe$withDefault, 'No region', _p4.result.region)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Nearest postcodes: ',
									A2(
										_elm_lang$core$String$join,
										'; ',
										A2(
											_elm_lang$core$List$drop,
											1,
											A2(
												_elm_lang$core$List$map,
												function (a) {
													return a.postcode;
												},
												_p3._1.result))))),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$initialModel = function (route) {
	return {
		route: route,
		history: {ctor: '[]'},
		locationInfo: _krisajenkins$remotedata$RemoteData$NotAsked,
		nearestInfo: _krisajenkins$remotedata$RemoteData$NotAsked,
		postcode: 'CB3 0FA',
		validPostcode: _user$project$Types$parsePostcode('CB3 0FA')
	};
};
var _user$project$Main$GetNearestInfoFromWeb = {ctor: 'GetNearestInfoFromWeb'};
var _user$project$Main$GetDataFromWeb = {ctor: 'GetDataFromWeb'};
var _user$project$Main$ChangePostcode = function (a) {
	return {ctor: 'ChangePostcode', _0: a};
};
var _user$project$Main$NearestInfoResponse = function (a) {
	return {ctor: 'NearestInfoResponse', _0: a};
};
var _user$project$Main$getNearestInfo = function (postcode) {
	return A2(
		_elm_lang$core$Platform_Cmd$map,
		_user$project$Main$NearestInfoResponse,
		_krisajenkins$remotedata$RemoteData$sendRequest(
			A2(
				_elm_lang$http$Http$get,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'http://api.postcodes.io/postcodes/',
					A2(_elm_lang$core$Basics_ops['++'], postcode, '/nearest')),
				_user$project$Types$decodeNearestInfo)));
};
var _user$project$Main$LocationInfoResponse = function (a) {
	return {ctor: 'LocationInfoResponse', _0: a};
};
var _user$project$Main$getLocationInfo = function (postcode) {
	return A2(
		_elm_lang$core$Platform_Cmd$map,
		_user$project$Main$LocationInfoResponse,
		_krisajenkins$remotedata$RemoteData$sendRequest(
			A2(
				_elm_lang$http$Http$get,
				A2(_elm_lang$core$Basics_ops['++'], 'http://api.postcodes.io/postcodes/', postcode),
				_user$project$Types$decodeLocationInfo)));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p5 = msg;
			switch (_p5.ctor) {
				case 'ChangeLocation':
					var _p8 = _p5._0;
					if (_elm_lang$core$Native_Utils.eq(_p8, '') || _elm_lang$core$Native_Utils.eq(_p8, '/')) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{route: _user$project$Types$HomeRoute}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var validatedPostcode = _user$project$Types$parsePostcode(_p8);
						var _p6 = validatedPostcode;
						if (_p6.ctor === 'Ok') {
							var _p7 = _p6._0;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										history: {ctor: '::', _0: _p7, _1: model.history}
									}),
								_1: _elm_lang$navigation$Navigation$newUrl(_p7)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										route: _user$project$Types$InvalidRoute(_p6._0)
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					}
				case 'OnLocationChange':
					var _p9 = _p5._0;
					var decodedPostcodeUrl = A2(
						_elm_lang$core$Maybe$withDefault,
						'',
						_elm_lang$http$Http$decodeUri(
							A2(
								_elm_lang$core$Maybe$withDefault,
								'',
								A2(_evancz$url_parser$UrlParser$parsePath, _evancz$url_parser$UrlParser$string, _p9))));
					var newRoute = _user$project$Router$parseLocation(_p9);
					var _v4 = _user$project$Main$GetDataFromWeb,
						_v5 = _elm_lang$core$Native_Utils.update(
						model,
						{
							route: newRoute,
							postcode: decodedPostcodeUrl,
							validPostcode: _user$project$Types$parsePostcode(decodedPostcodeUrl)
						});
					msg = _v4;
					model = _v5;
					continue update;
				case 'LocationInfoResponse':
					var _v6 = _user$project$Main$GetNearestInfoFromWeb,
						_v7 = _elm_lang$core$Native_Utils.update(
						model,
						{locationInfo: _p5._0});
					msg = _v6;
					model = _v7;
					continue update;
				case 'NearestInfoResponse':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{nearestInfo: _p5._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ChangePostcode':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{postcode: _p5._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'GetDataFromWeb':
					var _p10 = model.validPostcode;
					if (_p10.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _user$project$Main$getLocationInfo(model.postcode)
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				default:
					var _p11 = model.validPostcode;
					if (_p11.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _user$project$Main$getNearestInfo(model.postcode)
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
			}
		}
	});
var _user$project$Main$OnLocationChange = function (a) {
	return {ctor: 'OnLocationChange', _0: a};
};
var _user$project$Main$init = function (location) {
	var currentRoute = _user$project$Router$parseLocation(location);
	return A2(
		_user$project$Main$update,
		_user$project$Main$OnLocationChange(location),
		_user$project$Main$initialModel(currentRoute));
};
var _user$project$Main$ChangeLocation = function (a) {
	return {ctor: 'ChangeLocation', _0: a};
};
var _user$project$Main$nav = function (postcode) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(_user$project$Router$homePath),
					_1: {
						ctor: '::',
						_0: _user$project$Main$onLinkClick(
							_user$project$Main$ChangeLocation(_user$project$Router$homePath)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Home'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$historyLinks = function (address) {
	return A2(
		_elm_lang$html$Html$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(address),
					_1: {
						ctor: '::',
						_0: _user$project$Main$onLinkClick(
							_user$project$Main$ChangeLocation(address)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(address),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$viewHistory = function (history) {
	return A2(
		_elm_lang$html$Html$ul,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _user$project$Main$historyLinks, history));
};
var _user$project$Main$page = function (model) {
	var _p12 = model.route;
	switch (_p12.ctor) {
		case 'HomeRoute':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Enter a postcode above'),
					_1: {
						ctor: '::',
						_0: _user$project$Main$viewHistory(model.history),
						_1: {ctor: '[]'}
					}
				});
		case 'PostcodeRoute':
			var combinedResponse = A3(
				_krisajenkins$remotedata$RemoteData$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				model.locationInfo,
				model.nearestInfo);
			var _p13 = combinedResponse;
			switch (_p13.ctor) {
				case 'NotAsked':
					return _elm_lang$html$Html$text('Initialising.');
				case 'Loading':
					return A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Loading.'),
							_1: {ctor: '[]'}
						});
				case 'Failure':
					return _user$project$Main$viewServerError(_p13._0);
				default:
					return _user$project$Main$viewInfo(_p13._0);
			}
		case 'InvalidRoute':
			var _p14 = _elm_lang$core$List$head(_p12._0.context);
			if (_p14.ctor === 'Just') {
				return _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'The ',
						A2(_elm_lang$core$Basics_ops['++'], _p14._0.description, ' of your postcode is incorrect.')));
			} else {
				return _elm_lang$html$Html$text('There is a problem with your postcode.');
			}
		default:
			return _elm_lang$html$Html$text('Not Found');
	}
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(_user$project$Router$homePath),
							_1: {
								ctor: '::',
								_0: _user$project$Main$onLinkClick(
									_user$project$Main$ChangeLocation(_user$project$Router$homePath)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Home'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('text'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder('Postcode'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$ChangePostcode),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$value(model.postcode),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Main$ChangeLocation(model.postcode)),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Get info'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$Main$page(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Main$OnLocationChange,
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
